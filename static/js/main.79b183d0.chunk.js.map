{"version":3,"sources":["ScrollIntoView.js","App.js","index.js"],"names":["ScrollIntoView","_ref","scrollToUniqueId","children","registry","useRef","useEffect","undefined","ref","current","node","findDOMNode","scrollIntoView","behavior","register","id","unregister","React","Children","map","child","cloneElement","ScrollElement","_ref2","uniqueId","generateFakeData","Object","toConsumableArray","Array","keys","_","i","Math","floor","random","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newData","setState","data","selectedIndex","changeSelectedIndex","offset","_this$state","state","length","_this2","_this$state2","selectedId","react_default","a","createElement","className","onClick","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"sOAGO,SAASA,EAATC,GAAwD,IAA9BC,EAA8BD,EAA9BC,iBAAkBC,EAAYF,EAAZE,SAE3CC,EAAWC,iBAAO,IACxBC,oBAAU,WAIR,QAAyBC,IAArBL,GAAuD,OAArBA,EAA2B,CAC/D,IAAMM,EAAMJ,EAASK,QAAQP,GACvBQ,EAAOF,EAAMG,sBAAYH,EAAIC,SAAW,KAC1CC,GACFA,EAAKE,eAAe,CAAEC,SAAU,aAGnC,CAACT,EAAUF,IAGd,IAAMY,EAAW,SAACC,EAAIP,GACpBJ,EAASK,QAAQM,GAAMP,GAInBQ,EAAa,SAAAD,UACVX,EAASK,QAAQM,IAI1B,OAAOE,IAAMC,SAASC,IAAIhB,EAAU,SAAAiB,GAAK,OACvCH,IAAMI,aAAaD,EAAO,CACxBN,WACAE,iBAKC,SAASM,EAATC,GAAqE,IAA5CC,EAA4CD,EAA5CC,SAAUV,EAAkCS,EAAlCT,SAAUE,EAAwBO,EAAxBP,WAAYb,EAAYoB,EAAZpB,SAExDK,EAAMH,iBAAO,MAUnB,OATAC,oBAAU,WAKR,OAHAQ,EAASU,EAAUhB,GAGZ,kBAAMQ,EAAWQ,KACvB,CAACA,EAAUhB,EAAKM,EAAUE,IAGtBC,IAAMI,aAAalB,EAAU,CAAEK,QC7CxC,SAASiB,IACP,OAAOC,OAAAC,EAAA,EAAAD,CAAIE,MAAM,IAAIC,QAAQV,IAAI,SAACW,EAAGC,GAAJ,MAAW,CAC1ChB,GAAIiB,KAAKC,MAAMD,KAAKE,UAAYH,EAAI,GAAK,YAmE9BI,cA9Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAX,OAAAY,EAAA,EAAAZ,CAAAa,KAAAJ,IACjBE,EAAAX,OAAAc,EAAA,EAAAd,CAAAa,KAAAb,OAAAe,EAAA,EAAAf,CAAAS,GAAAO,KAAAH,KAAMH,KAWRO,QAAU,WACRN,EAAKO,SAAS,CACZC,KAAMpB,IACNqB,cAAe,KAfAT,EAqBnBU,oBAAsB,SAAAC,GAAU,IAAAC,EACEZ,EAAKa,MAA7BJ,EADsBG,EACtBH,cAAeD,EADOI,EACPJ,KACnBC,EAAgBE,EAAS,GAAKF,EAAgBE,GAAUH,EAAKM,QAIjEd,EAAKO,SAAS,CAAEE,cAAeA,EAAgBE,KAxB/CX,EAAKa,MAAQ,CACXL,KAAMpB,IACNqB,cAAe,GALAT,wEA8BV,IAAAe,EAAAb,KAAAc,EACyBd,KAAKW,MAA7BL,EADDQ,EACCR,KAAMC,EADPO,EACOP,cAGRQ,EAAaT,EAAKC,GAAiBD,EAAKC,GAAe/B,GAAK,KAElE,OACEwC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQE,QAASpB,KAAKI,SAAtB,YACAY,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMP,EAAKL,qBAAqB,KAAjD,UACAQ,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMP,EAAKL,oBAAoB,KAAhD,UAEAQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACzD,EAAD,CAAgBE,iBAAkBoD,GAC/BT,EAAK1B,IAAI,SAAAlB,GAAA,IAAGc,EAAHd,EAAGc,GAAH,OACRwC,EAAAC,EAAAC,cAACnC,EAAD,CAAesC,IAAK7C,EAAIS,SAAUT,GAChCwC,EAAAC,EAAAC,cAAA,OACEC,UACEJ,IAAevC,EAAK,sBAAwB,SAG9CwC,EAAAC,EAAAC,cAAA,SAAI1C,iBApDJ8C,aCNlBC,IAASC,OAAOR,EAAAC,EAAAC,cAACO,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.79b183d0.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { findDOMNode } from \"react-dom\";\n\nexport function ScrollIntoView({ scrollToUniqueId, children }) {\n  // Store ref registry as a ref itself\n  const registry = useRef({});\n  useEffect(() => {\n    // When scrollToUniqueId changes we grab the ref in the registry\n    // use react-dom to find the underlying DOM node\n    // and scroll to that node\n    if (scrollToUniqueId !== undefined && scrollToUniqueId !== null) {\n      const ref = registry.current[scrollToUniqueId];\n      const node = ref ? findDOMNode(ref.current) : null;\n      if (node) {\n        node.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n  }, [registry, scrollToUniqueId]);\n\n  // Passed to ScrollElement to register\n  const register = (id, ref) => {\n    registry.current[id] = ref;\n  };\n\n  // Passed to ScrollElement to unregister\n  const unregister = id => {\n    delete registry.current[id];\n  };\n\n  // Clone children adding registration functions to props\n  return React.Children.map(children, child =>\n    React.cloneElement(child, {\n      register,\n      unregister\n    })\n  );\n}\n\nexport function ScrollElement({ uniqueId, register, unregister, children }) {\n  // Create ref to register\n  const ref = useRef(null);\n  useEffect(() => {\n    // Register on mount / changes\n    register(uniqueId, ref);\n\n    // Unregister on unmount\n    return () => unregister(uniqueId);\n  }, [uniqueId, ref, register, unregister]);\n\n  // Clone child with ref added\n  return React.cloneElement(children, { ref });\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport { ScrollIntoView, ScrollElement } from \"./ScrollIntoView\";\n\nfunction generateFakeData() {\n  return [...Array(10).keys()].map((_, i) => ({\n    id: Math.floor(Math.random() * (i + 1) * 10000)\n  }));\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: generateFakeData(),\n      selectedIndex: 0\n    };\n  }\n\n  // Simulate pagination by\n  // creating new data and\n  // returning to first entry\n  newData = () => {\n    this.setState({\n      data: generateFakeData(),\n      selectedIndex: 0\n    });\n  };\n\n  // Move selectedIndex by a specific offset\n  // staying within the bounds of our data\n  changeSelectedIndex = offset => {\n    const { selectedIndex, data } = this.state;\n    if (selectedIndex + offset < 0 || selectedIndex + offset >= data.length) {\n      return;\n    }\n\n    this.setState({ selectedIndex: selectedIndex + offset });\n  };\n\n  render() {\n    const { data, selectedIndex } = this.state;\n\n    // Derive the currently selected entry's ID from the selectedIndex\n    const selectedId = data[selectedIndex] ? data[selectedIndex].id : null;\n\n    return (\n      <div className=\"container\">\n        <button onClick={this.newData}>New Data</button>\n        <button onClick={() => this.changeSelectedIndex(-1)}>&uarr;</button>\n        <button onClick={() => this.changeSelectedIndex(+1)}>&darr;</button>\n\n        <div className=\"scroll-container\">\n          <ScrollIntoView scrollToUniqueId={selectedId}>\n            {data.map(({ id }) => (\n              <ScrollElement key={id} uniqueId={id}>\n                <div\n                  className={\n                    selectedId === id ? \"entry entry--active\" : \"entry\"\n                  }\n                >\n                  <p>{id}</p>\n                </div>\n              </ScrollElement>\n            ))}\n          </ScrollIntoView>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}